//models/Request.js
const mongoose = require('mongoose');

const requestSchema = new mongoose.Schema({
  hospitalId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  hospitalName: {
    type: String,
    required: true
  },
  bloodGroup: {
    type: String,
    enum: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
    required: true
  },
  city: {
    type: String,
    required: true
  },
  unitsRequired: {
    type: Number,
    required: true,
    min: 1
  },
  urgency: {
    type: String,
    enum: ['low', 'medium', 'high'],
    default: 'medium'
  },
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'fulfilled'],
    default: 'pending'
  },
  contactPerson: {
    type: String,
    required: true
  },
  contactNumber: {
    type: String,
    required: true
  },
  purpose: {
    type: String,
    required: true
  },
  // New field to track auto-generated requests
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  // New fields for donor request tracking
  donorRequests: [{
    donorId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    donorEmail: String,
    donorName: String,
    emailSent: {
      type: Boolean,
      default: false
    },
    emailSentAt: Date,
    donorResponded: {
      type: Boolean,
      default: false
    },
    responseStatus: {
      type: String,
      enum: ['accepted', 'declined', 'pending'],
      default: 'pending'
    },
    responseDate: Date
  }],
  totalEmailsSent: {
    type: Number,
    default: 0
  },
  responsesReceived: {
    type: Number,
    default: 0
  }
}, {
  timestamps: true
});

// Index for better query performance
requestSchema.index({ hospitalId: 1, createdAt: -1 });
requestSchema.index({ status: 1 });
requestSchema.index({ bloodGroup: 1 });
requestSchema.index({ isAutoGenerated: 1 });
requestSchema.index({ createdAt: -1 });

// Static method to check for low inventory and create auto-requests
requestSchema.statics.checkLowInventoryAndCreateRequests = async function() {
  try {
    const Inventory = require('./Inventory');
    const User = require('./User');
    
    // Get all blood groups with â‰¤ 3 units
    const lowInventory = await Inventory.find({ 
      unitsAvailable: { $lte: 3 } 
    });

    if (lowInventory.length === 0) {
      return { created: 0, message: 'No low inventory items' };
    }

    // Get admin user to associate with auto-requests
    const adminUser = await User.findOne({ role: 'admin' });
    
    if (!adminUser) {
      return { created: 0, message: 'No admin user found' };
    }

    const createdRequests = [];

    for (const item of lowInventory) {
      // Check if auto-request already exists for this blood group in last 24 hours
      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
      
      const existingAutoRequest = await this.findOne({
        hospitalId: adminUser._id,
        bloodGroup: item.bloodGroup,
        isAutoGenerated: true,
        createdAt: { $gte: twentyFourHoursAgo },
        status: 'pending'
      });

      if (!existingAutoRequest) {
        // Create auto-request
        const autoRequest = new this({
          hospitalId: adminUser._id,
          hospitalName: 'System Administrator',
          bloodGroup: item.bloodGroup,
          city: 'System',
          unitsRequired: 10, // Urgent requirement for low inventory
          urgency: 'high',
          status: 'pending',
          contactPerson: 'LifeLink System',
          contactNumber: '0422-3566580',
          purpose: `AUTO: Low inventory alert - ${item.bloodGroup} blood has only ${item.unitsAvailable} units remaining`,
          isAutoGenerated: true
        });

        await autoRequest.save();
        createdRequests.push(autoRequest);
      }
    }

    return { 
      created: createdRequests.length, 
      requests: createdRequests,
      message: `Created ${createdRequests.length} auto-requests for low inventory` 
    };
  } catch (error) {
    console.error('Error in checkLowInventoryAndCreateRequests:', error);
    throw error;
  }
};

module.exports = mongoose.model('Request', requestSchema);